#!/bin/bash
#
# Copyright (C) 2009-2018 Stonyx
# http://www.stonyx.com
#
# This script is free software. You can redistribute it and/or modify it under the terms of the GNU
# General Public License Version 2 (or at your option any later version) as published by The Free
# Software Foundation.
#
# This script is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# If you did not received a copy of the GNU General Public License along with this script see
# http://www.gnu.org/copyleft/gpl.html or write to The Free Software Foundation, 675 Mass Ave,
# Cambridge, MA 02139, USA.

# ------------------------------
# RSnapshot Type Script
# ------------------------------
# Usage: RSyncSnapshot Source_Directory Target_Directory Number_of_Snapshots_to_Keep Log_File
#          Lock_File Optional_Additional_RSync_Arguments ...

# ----- Commands -----

# Uncomment the following section if running on FreeNAS and comment the next section
ECHO=/bin/echo
SLEEP=/bin/sleep
RM=/bin/rm
MV=/bin/mv
MKDIR=/bin/mkdir
RSYNC=/usr/local/bin/rsync
TOUCH=/usr/bin/touch

# Uncomment the following section if running on Ubuntu and comment the previous section
# ECHO=/bin/echo
# SLEEP=/bin/sleep
# RM=/bin/rm
# MV=/bin/mv
# MKDIR=/bin/mkdir
# RSYNC=/usr/bin/rsync
# TOUCH=/bin/touch

# ----- RSync Options -----

# Explanation of default options
# a = archive mode; equals rlptgoD
#   r = recurse into directories
#   l = copy symlinks as symlinks
#   p = preserve permissions
#   t = preserve modification times
#   g = preserve group
#   o = preserve owner
#   D = preserve device and special files
# c = skip based on checksum, not mod-time & size
# v = increase verbosity
# x = don't cross filesystem boundaries
# H = preserve hard links
# S = handle sparse files efficiently
RSYNC_OPTIONS="-acvxHS"

# ----- Script -----

# Make things pretty
$ECHO

# Process the source argument
if [[ ! $1 ]]
then
  $ECHO "Usage: RSyncSnapshot Source_Directory Target_Directory"
  $ECHO "  Number_of_Snapshots_to_Keep Log_File Lock_File"
  $ECHO "  Optional_Additional_RSync_Arguments ..."
  $ECHO
  $ECHO "Source directory not specified."
  $ECHO
  exit 1
fi
SOURCE=$1
if [[ ! -d $SOURCE ]]
then
  $ECHO "Specified source directory (\"$SOURCE\") doesn't exist."
  $ECHO
  exit 1
fi

# Process the target argument
if [[ ! $2 ]]
then
  $ECHO "Usage: RSyncSnapshot Source_Directory Target_Directory"
  $ECHO "  Number_of_Snapshots_to_Keep Log_File Lock_File"
  $ECHO "  Optional_Additional_RSync_Arguments ..."
  $ECHO
  $ECHO "Target directory not specified."
  $ECHO
  exit 1
fi
TARGET=$2
if [[ ! -d $TARGET ]]
then
  $ECHO "Specified target directory (\"$TARGET\") doesn't exist."
  $ECHO
  exit 1
fi

# Process the snapshot count argument
if [[ ! $3 ]]
then
  $ECHO "Usage: RSyncSnapshot Source_Directory Target_Directory"
  $ECHO "  Number_of_Snapshots_to_Keep Log_File Lock_File"
  $ECHO "  Optional_Additional_RSync_Arguments ..."
  $ECHO
  $ECHO "Number of snapshots to keep not specified."
  $ECHO
  exit 1
fi
SNAPSHOT_COUNT=$3
if [[ ! $SNAPSHOT_COUNT =~ ^[0-9]+$ ]]
then
  $ECHO "Specified number of snapshots to keep has to be a numeric value."
  $ECHO
  exit 1
fi
if [[ $SNAPSHOT_COUNT -lt 1 ]]
then
  $ECHO "Specified number of snapshots to keep can not be less than one."
  $ECHO
  exit 1
fi

# Process the log file argument
if [[ ! $4 ]]
then
  $ECHO "Usage: RSyncSnapshot Source_Directory Target_Directory"
  $ECHO "  Number_of_Snapshots_to_Keep Log_File Lock_File"
  $ECHO "  Optional_Additional_RSync_Arguments ..."
  $ECHO
  $ECHO "Log file not specified."
  $ECHO
  exit 1
fi
LOG_FILE=$4

# Process the lock file argument
if [[ ! $5 ]]
then
  $ECHO "Usage: RSyncSnapshot Source_Directory Target_Directory"
  $ECHO "  Number_of_Snapshots_to_Keep Log_File Lock_File"
  $ECHO "  Optional_Additional_RSync_Arguments ..."
  $ECHO
  $ECHO "Lock file not specified."
  $ECHO
  exit 1
fi
LOCK_FILE=$5  

# Make sure no other instance of this script is running
if [[ -e $LOCK_FILE ]]
then
  $ECHO "Another instance of the RSyncSnapshot script is already running."
  $ECHO "Press Ctrl+C to cancel this script or if no other copy of RSnapshot"
  $ECHO "is actually running delete the \"$LOCK_FILE\" file."
  $ECHO
  $ECHO -n "Waiting for the other instance of RSyncSnapshot to finish ..."
  $ECHO "RSyncSnapshot: Waiting for another instance of RSyncSnapshot to finish." >> "$LOG_FILE"

  # Check every 15 seconds if the other instance is done
  $SLEEP 15
  while [[ -e $LOCK_FILE ]]
  do
    $ECHO -n "."
    $SLEEP 15
  done

  # Make things pretty
  $ECHO
  $ECHO
fi

# Create the lock file
: > "$LOCK_FILE"

# Find the first snapshots that doesn't exist
SNAPSHOT=0
while [[ $SNAPSHOT -le $SNAPSHOT_COUNT ]]
do
  # Check if the snapshot directory doesn't exist
  if [[ ! -d "$TARGET/Snapshot.$SNAPSHOT" ]]
  then
    break
  fi

  # Increment the counter by 1
  SNAPSHOT=$((SNAPSHOT+1))
done
if [[ $SNAPSHOT -eq $((SNAPSHOT_COUNT+1)) ]]
then
  SNAPSHOT=-1
fi

# Delete the oldest snapshot if all snapshots exist
if [[ $SNAPSHOT -eq -1 ]]
then
  $ECHO "Deleting oldest snapshot (number $SNAPSHOT_COUNT) ..."
  $ECHO "RSyncSnapshot: Deleting oldest snapshot (number $SNAPSHOT_COUNT)." >> "$LOG_FILE"
  $RM -rf "$TARGET/Snapshot.$SNAPSHOT_COUNT"
fi

# Make each snapshot one snapshot older (up to the first snapshot that doens't exist)
if [[ $SNAPSHOT -eq -1 ]]
then
  SNAPSHOT=$SNAPSHOT_COUNT
fi
while [[ $SNAPSHOT -gt 0 ]]
do
  # Reduce the counter by 1
  SNAPSHOT=$((SNAPSHOT-1))

  # Move the snapshot
  $ECHO "Moving snapshot number $SNAPSHOT to $((SNAPSHOT+1)) ..."
  $ECHO "RSyncSnapshot: Moving snapshot number $SNAPSHOT to $((SNAPSHOT+1))." >> "$LOG_FILE"
  $MV -f "$TARGET/Snapshot.$SNAPSHOT" "$TARGET/Snapshot.$((SNAPSHOT+1))"
done

# Find the first snapshot that exists
SNAPSHOT=1
while [[ $SNAPSHOT -le $SNAPSHOT_COUNT ]]
do
  # Check if the snapshot directory exists
  if [[ -d "$TARGET/Snapshot.$SNAPSHOT" ]]
  then
    break
  fi

  # Increment the counter by 1
  SNAPSHOT=$((SNAPSHOT+1))
done
if [[ $SNAPSHOT -eq $((SNAPSHOT_COUNT+1)) ]]
then
  SNAPSHOT=-1
fi

# Create the snapshot directory
$MKDIR "$TARGET/Snapshot.0"

# Create the RSync command
RSYNC_COMMAND="$RSYNC $RSYNC_OPTIONS "
if [[ $SNAPSHOT -ne -1 ]]
then
  RSYNC_COMMAND+="--link-dest=\"../Snapshot.$SNAPSHOT\" "
fi
RSYNC_COMMAND+="--log-file=\"$LOG_FILE\" "
for (( i=5; i<$#; i++ ))
do
  RSYNC_COMMAND+="\"$@[$i]\" "
done
RSYNC_COMMAND+="\"$SOURCE\" "
RSYNC_COMMAND+="\"$TARGET/Snapshot.0\" "

# Do the actual backup using RSync
$ECHO "Backing up \"$SOURCE\" to snapshot number 0 using the command below ..."
$ECHO "$RSYNC_COMMAND"
$ECHO
$ECHO "RSyncSnapshot: Backing up \"$SOURCE\" to snapshot number 0 using the command below:" >> \
  "$LOG_FILE"
$ECHO "RSyncSnapshot: $RSYNC_COMMAND" >> "$LOG_FILE"
$ECHO >> "$LOG_FILE"
eval $RSYNC_COMMAND

# Update the time of the snapshot directory
$TOUCH "$TARGET/Snapshot.0"

# Remove the lock file
$RM -f "$LOCK_FILE"

# Make things pretty
$ECHO
$ECHO >> "$LOG_FILE"

# All done
exit 0