#!/bin/bash
#
# Copyright (C) 2009-2011 Stonyx
# http://www.stonyx.com
#
# This script is free software. You can redistribute it and/or modify it
# under the terms of the GNU General Public License Version 2 (or at your
# option any later version) as published by The Free Software Foundation.
#
# This script is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# If you did not received a copy of the GNU General Public License along
# with this script see http://www.gnu.org/copyleft/gpl.html or write to
# The Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.

# ------------------------------
# RSnapshot Type Script
# ------------------------------
# Usage: RSyncSnapshot Source_Directory Target_Directory Number_of_Snapshots_to_Keep
#          Optional_Log_File Custom_Lock_File

# ----- Commands -----

# Uncomment the following section if running on FreeNAS and comment the next section
ECHO=/bin/echo
SLEEP=/bin/sleep
RM=/bin/rm
EXPR=/bin/expr
MV=/bin/mv
MKDIR=/bin/mkdir
RSYNC=/usr/local/bin/rsync
TOUCH=/usr/bin/touch

# Uncomment the following section if running on Ubuntu and comment the previous section
# ECHO=/bin/echo
# SLEEP=/bin/sleep
# RM=/bin/rm
# EXPR=/usr/bin/expr
# MV=/bin/mv
# MKDIR=/bin/mkdir
# RSYNC=/usr/bin/rsync
# TOUCH=/bin/touch

# ----- RSync Options -----

# Explanation of default options
# a = archive mode; equals rlptgoD
#   r = recurse into directories
#   l = copy symlinks as symlinks
#   p = preserve permissions
#   t = preserve modification times
#   g = preserve group
#   o = preserve owner
#   D = preserve device and special files
# c = skip based on checksum, not mod-time & size
# v = increase verbosity
# x = don't cross filesystem boundaries
# H = preserve hard links
# S = handle sparse files efficiently
RSYNC_OPTIONS="-acvxHS"

# ----- Initialize Variables -----

RSYNC_LOG_FILE="--log-file=$LOG_FILE"
RSYNC_LINK_TARGET=

# ----- Script -----

# Make things pretty
$ECHO

# Process the source argument
if [[ ! $1 ]]
then
  $ECHO "Usage: RSyncSnapshot Source_Directory Target_Directory"
  $ECHO "   Number_of_Snapshots_to_Keep Optional_Log_File"
  $ECHO "   Custom_Lock_File"
  $ECHO
  $ECHO "Source directory not specified."
  $ECHO
  exit 1
fi
SOURCE=$1
if [[ ! -d $SOURCE ]]
then
  $ECHO "Specified source directory (\"$SOURCE\") doesn't exist."
  $ECHO
  exit 1
fi

# Process the target argument
if $[[ ! $2 ]]
then
  $ECHO "Usage: RSyncSnapshot Source_Directory Target_Directory"
  $ECHO "   Number_of_Snapshots_to_Keep Optional_Log_File"
  $ECHO "   Custom_Lock_File"
  $ECHO
  $ECHO "Target directory not specified."
  $ECHO
  exit 1
fi
TARGET=$2
if [[ ! -d $TARGET ]]
then
  $ECHO "Specified target directory (\"$TARGET\") doesn't exist."
  $ECHO
  exit 1
fi

# Process the snapshot count argument
if [[ ! $3 ]]
then
  $ECHO "Usage: RSyncSnapshot Source_Directory Target_Directory"
  $ECHO "   Number_of_Snapshots_to_Keep Optional_Log_File"
  $ECHO "   Custom_Lock_File"
  $ECHO
  $ECHO "Number of snapshots to keep not specified."
  $ECHO
  exit 1
fi
SNAPSHOT_COUNT=$3
if [[ ! $SNAPSHOT_COUNT =~ "^\d+$" ]]
then
  $ECHO "Specified number of snapshots to keep has to be a numeric value."
  $ECHO
  exit 1
fi
if [[ $SNAPSHOT_COUNT -lt 1 ]]
then
  $ECHO "Specified number of snapshots to keep can not be less than one."
  $ECHO
  exit 1
fi

# Process the log file argument
LOG_FILE=$4

# Process the lock file argument
if [[ ! $5 ]]
then
  LOCK_FILE="/mnt/.RSyncSnapshotLock"
else
  LOCK_FILE=$5  
fi

# Make sure no other instance of this script is running
if [[ -e $LOCK_FILE ]]
then
  $ECHO "Another instance of the RSyncSnapshot script is already running."
  $ECHO "Press Ctrl+C to cancel this script or if no other copy of RSnapshot"
  $ECHO "is actually running delete the \"$LOCK_FILE\" file."
  $ECHO
  $ECHO -n "Waiting for the other instance of RSyncSnapshot to finish ..."
  $ECHO "RSyncSnapshot: Waiting for another instance of RSyncSnapshot to finish." >> \
    "$LOG_FILE"

  # Check every 15 seconds if the other instance is done
  $SLEEP 15
  while [[ -e $LOCK_FILE ]]
  do
    $ECHO -n "."
    $SLEEP 15
  done

  # Make things pretty
  $ECHO
  $ECHO
fi

# Create the lock file
: > "$LOCK_FILE"

# Delete the oldest snapshot if it exists
if [[ -e "$TARGET/Snapshot.$SNAPSHOT_COUNT" ]]
then
  $ECHO "Deleting oldest snapshot (number $SNAPSHOT_COUNT) ..."
  $ECHO "RSyncSnapshot: Deleting oldest snapshot (number $SNAPSHOT_COUNT)." >> \
    "$LOG_FILE"
  $RM -rf "$TARGET/Snapshot.$SNAPSHOT_COUNT"
else
  $ECHO "Oldest snapshot (number $SNAPSHOT_COUNT) doesn't exist."
  $ECHO "RSyncSnapshot: Oldest snapshot (number $SNAPSHOT_COUNT) doesn't exist." >> \
    "$LOG_FILE"
fi

# Make each snapshot one snapshot older
while [[ $SNAPSHOT_COUNT -gt 0 ]]
do
  # Reduce SNAPSHOP_COUNT by 1 (since we've already dealt with one snapshot above)
  SNAPSHOT_COUNT=$SNAPSHOT_COUNT-1

  # Check if the snapshot exists
  if [[ -e "$TARGET/Snapshot.$SNAPSHOT_COUNT" ]]
  then
    $ECHO "Moving snapshot number $SNAPSHOT_COUNT to $($EXPR $SNAPSHOT_COUNT + 1) ..."
    $ECHO "RSyncSnapshot: Moving snapshot number $SNAPSHOT_COUNT to $($EXPR \
      $SNAPSHOT_COUNT + 1)." >> "$LOG_FILE"
    $MV -f "$TARGET/Snapshot.$SNAPSHOT_COUNT" "$TARGET/Snapshot.$($EXPR $SNAPSHOT_COUNT + 1)"
  else
    $ECHO "Snapshot number $SNAPSHOT_COUNT doesn't exist."
    $ECHO "RSyncSnapshot: Snapshot number $SNAPSHOT_COUNT doesn't exist." >> \
      "$LOG_FILE"
  fi
done

# Create the snapshot directory
$MKDIR "$TARGET/Snapshot.0"

# Create the RSync command
RSYNC_COMMAND="$RSYNC $RSYNC_OPTIONS "
if [[ -e "$TARGET/Snapshot.1" ]]
then
  RSYNC_COMMAND+="\"--link-dest=../Snapshot.1\" "
fi
if [[ $LOG_FILE ]]
then
  RSYNC_COMMAND+="\"--log-file=$LOG_FILE\" "
fi
RSYNC_COMMAND+="\"$SOURCE\" "
RSYNC_COMMAND+="\"$TARGET\" "

# Do the actual backup using RSync
$ECHO "Backing up \"$SOURCE\" to snapshot number 0 using the command below ..."
$ECHO "$RSYNC_COMMAND"
$ECHO
$ECHO "RSyncSnapshot: Backing up \"$SOURCE\" to snapshot number 0 using the command below:" >> \
  "$LOG_FILE"
$ECHO "RSyncSnapshot: $RSYNC_COMMAND" >> "$LOG_FILE"
$ECHO >> "$LOG_FILE"
$RSYNC_COMMAND

# Update the time of the snapshot directory
$TOUCH "$TARGET/Snapshot.0"

# Remove the lock file
$RM -f "$LOCK_FILE"

# Make things pretty
$ECHO
$ECHO >> "$LOG_FILE"

# All done
exit 0